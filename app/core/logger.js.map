{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Optional} from \"@angular/core\";\nimport {Level} from \"./level\";\n\n/**\n * Logger options.\n * See {@link Logger}.\n *\n * level - How much detail you want to see in the logs, 0 being off, 1 being the less detailed, 5 being the most. Defaults to WARN.\n * global - Whether you want the created logger object to be exposed in the global scope. Defaults to true.\n * globalAs - The window's property name that will hold the logger object created. Defaults to 'logger'.\n * store - Whether you want the level config to be saved in the local storage so it doesn't get lost when you refresh. Defaults to false.\n * storeAs - The local storage key that will be used to save the level config if the store setting is true. Defaults to 'angular2.logger.level'.\n *\n * Created by Langley on 3/23/2016.\n *\n */\nexport class Options {\n    level: Level;\n    global: boolean;\n    globalAs: string;\n    store: boolean;\n    storeAs: string;\n}\n\n// For browsers that don't implement the debug method, log will be used instead. Fixes #62.\nconst CONSOLE_DEBUG_METHOD = console[\"debug\"] ? \"debug\" : \"log\";\n\n// Temporal until https://github.com/angular/angular/issues/7344 gets fixed.\nconst DEFAULT_OPTIONS: Options = {\n    level: Level.WARN,\n    global: true,\n    globalAs: \"logger\",\n    store: false,\n    storeAs: \"angular2.logger.level\"\n};\n\n@Injectable()\nexport class Logger {\n\n    private _level: Level;\n    private _globalAs: string;\n    private _store: boolean;\n    private _storeAs: string;\n\n    public Level: any = Level;\n\n    constructor( @Optional() options?: Options ) {\n\n        // Move this to the constructor definition when optional parameters are working with @Injectable: https://github.com/angular/angular/issues/7344\n        let { level, global, globalAs, store, storeAs } = Object.assign( {}, DEFAULT_OPTIONS, options );\n\n        this._level = level;\n        this._globalAs = globalAs;\n        this._storeAs = storeAs;\n\n        global && this.global();\n\n        if ( store || this._loadLevel() ) this.store();\n\n    }\n\n    private _loadLevel = (): Level => Number(localStorage.getItem( this._storeAs ));\n\n    private _storeLevel(level: Level) { localStorage[ this._storeAs ] = level; }\n\n    error(message?: any, ...optionalParams: any[]) {\n        this.isErrorEnabled() && console.error.apply( console, arguments );\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        this.isWarnEnabled() && console.warn.apply( console, arguments );\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        this.isInfoEnabled() && console.info.apply( console, arguments );\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        this.isDebugEnabled() && ( <any> console )[ CONSOLE_DEBUG_METHOD ].apply( console, arguments );\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        this.isLogEnabled() && console.log.apply( console, arguments );\n    }\n\n    global = () => ( <any> window )[this._globalAs] = this;\n\n    store(): Logger {\n\n        this._store = true;\n        let storedLevel = this._loadLevel();\n        if ( storedLevel ) { this._level = storedLevel; }\n        else { this._storeLevel( this.level ); }\n\n        return this;\n\n    }\n\n    unstore(): Logger {\n        this._store = false;\n        localStorage.removeItem( this._storeAs );\n        return this;\n    }\n\n    isErrorEnabled = (): boolean => this.level >= Level.ERROR;\n    isWarnEnabled = (): boolean => this.level >= Level.WARN;\n    isInfoEnabled = (): boolean => this.level >= Level.INFO;\n    isDebugEnabled = (): boolean => this.level >= Level.DEBUG;\n    isLogEnabled = (): boolean => this.level >= Level.LOG;\n\n    get level(): Level { return this._level; }\n\n    set level(level: Level) {\n        this._store && this._storeLevel(level);\n        this._level = level;\n    }\n\n}\n"]}